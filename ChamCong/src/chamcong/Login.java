/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package chamcong;


import Data.Nhanvien;
import static chamcong.HomePage.thebus;
import connectDataBase.ConnectDB;
import java.awt.Color;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.RSAPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.smartcardio.CardException;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;



/**
 *
 * @author admin
 */
public class Login extends javax.swing.JFrame {
    private static final String SIGNING_ALGORITHM = "SHA256withRSA";
    static TheNV thebus;
    static HomePage homePage;
    static info info;
    private boolean connected= false;
    private static int login_status = 0; 
   // private ConnectCard connect = new ConnectCard();
    ConnectDB connectDatabase= new ConnectDB();
    private int firstUSE;
    private int saipin = 3;
    static boolean cardready= false;
    /**
     * Creates new form Login
     */
    public Login() {
        info = new info();
        thebus = new TheNV();
        homePage = new HomePage();
        initComponents();
        setConnected(connected);
        System.out.println(connected);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Button_connect = new javax.swing.JButton();
        form_login = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        edt_pin = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        chk_show_pw = new javax.swing.JCheckBox();
        txt_username = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Button_connect.setBackground(new java.awt.Color(0, 153, 0));
        Button_connect.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Button_connect.setForeground(new java.awt.Color(255, 255, 255));
        Button_connect.setText("Kết nối");
        Button_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_connectActionPerformed(evt);
            }
        });

        form_login.setBackground(new java.awt.Color(255, 255, 255));
        form_login.setAlignmentX(0.0F);
        form_login.setAlignmentY(0.0F);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 204));
        jLabel1.setText("Đăng nhập");

        edt_pin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edt_pinActionPerformed(evt);
            }
        });

        btnLogin.setBackground(new java.awt.Color(0, 0, 255));
        btnLogin.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnLogin.setForeground(new java.awt.Color(255, 255, 255));
        btnLogin.setText("Đăng nhập");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        chk_show_pw.setText("Hiển thị mã pin");
        chk_show_pw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_show_pwActionPerformed(evt);
            }
        });

        txt_username.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txt_username.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "User" }));

        javax.swing.GroupLayout form_loginLayout = new javax.swing.GroupLayout(form_login);
        form_login.setLayout(form_loginLayout);
        form_loginLayout.setHorizontalGroup(
            form_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(form_loginLayout.createSequentialGroup()
                .addGroup(form_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(form_loginLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(form_loginLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(form_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(form_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(chk_show_pw, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(edt_pin, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                .addComponent(txt_username, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        form_loginLayout.setVerticalGroup(
            form_loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(form_loginLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(txt_username, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(edt_pin, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(chk_show_pw)
                .addGap(18, 18, 18)
                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(form_login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Button_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(form_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button_connect)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getSaipin() {
        return saipin;
    }

    public void setSaipin(int saipin) {
        this.saipin = saipin;
    }
     // Phương thức để cập nhật trạng thái của các thành phần trong giao diện
    private void setConnected(boolean connected) {
        this.connected = connected;
        form_login.setEnabled(connected);
        btnLogin.setEnabled(connected);
        chk_show_pw.setEnabled(connected);
        edt_pin.setEnabled(connected);
        Button_connect.setText(connected ? "Đã kết nối" : "Kết nối");
        Button_connect.setBackground(connected ? Color.green : new Color(0, 153, 0));
    }
        private void loginSetEnabled(boolean b) {
        form_login.setEnabled(b);
        if(b){
            form_login.setBorder(BorderFactory.createLineBorder(Color.blue, 1, true));
            //txt_login.setForeground(Color.blue);
            edt_pin.setBackground(Color.white);
            chk_show_pw.setBackground(Color.white);
        }else{
            form_login.setBorder(null);
           // txt_login.setForeground(Color.black);
            edt_pin.setBackground(Color.decode("#d7d7d7"));
            chk_show_pw.setBackground(Color.decode("#d7d7d7"));
        }
       // txt_login.setEnabled(b);
        edt_pin.setEnabled(b);
        edt_pin.setEnabled(b);
        chk_show_pw.setEnabled(b);
        btnLogin.setEnabled(b);
      //  btn_admin.setEnabled(b);
    }
    
    
    private void Button_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_connectActionPerformed
            if (connected) {
       

        Button_connect.setText("KẾT NỐI THẺ");
        Button_connect.setBackground(Color.gray); 
        connected = false;
        } else {
            if (thebus.connectApplet()) { // Thiết lập kết nối
                byte[] cmd = {(byte) 0x00, (byte) 0xA4, (byte) 0x04, (byte) 0x00}; // Select
                byte[] data = {(byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00};
                byte lc = 6;
                byte le_expect = 2;

                thebus.sendAPDUtoApplet(cmd, data);
                Button_connect.setText("Đang kết nối");
                Button_connect.setBackground(Color.green); 
                connected = true;
                setConnected(connected);
            } else {
                JOptionPane.showMessageDialog(this, "Kết nối không thành công. Hãy thử lại.");
            }
        }
        
       
    }//GEN-LAST:event_Button_connectActionPerformed
 

    private void edt_pinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edt_pinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edt_pinActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
         
        String selectedUsername = (String) txt_username.getSelectedItem();
        String pass = edt_pin.getText();
        String pin = Arrays.toString(edt_pin.getPassword());
        
        System.out.println("pinnnnnnnn" + pin);
      //  ConnectCard connect = new ConnectCard();
        System.out.println("firstUSE" + firstUSE);
        
            // Lấy dữ liệu đã chọn từ JComboBox
            if("Admin".equals(selectedUsername) && "123123".equals(pass)){
                AdminPage adminPage = new AdminPage();
                adminPage.setVisible(true);
                adminPage.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
            
            if("User".equals(selectedUsername)){    
                if(VerifyPublickey() == false){
                    return;
                }
                if(connected == true ){
                    String defaultString="[0, 0, 0, 0]";
                    if(check_pindefault(defaultString)==1)
                    {
                        JOptionPane.showMessageDialog(this ,"Thẻ chưa khởi tạo dữ liệu ");
                        return;
                    }

                    if(check_pin(pin) == 0){
                        JOptionPane.showMessageDialog(this ,"Mã PIN sai. Vui lòng nhập lại.\n(Số lần nhập sai còn lại:"+--saipin+")");
                        cardready = false;
                    }
                    else if (check_pin(pin) == 1){
                        HomePage homePage = new HomePage();
                        homePage.setVisible(true);
                    }else JOptionPane.showMessageDialog(this, "Bạn đã nhập sai quá số lần cho phép. Thẻ đã bị khóa!");
                }else JOptionPane.showMessageDialog(this, "Thẻ chưa sẵn sàng");

               
               
    }

    }//GEN-LAST:event_btnLoginActionPerformed
     
    
    public boolean VerifyPublickey(){
        
//              gử dữ liệu, thực hiện ký 
        byte[] cmdcreateSig = {(byte) 0xA0, (byte) 0x24, (byte) 0x01, (byte) 0x00};
        String mxt = randomString(6);
        System.out.println("random " + mxt);
        byte[] data = mxt.getBytes();
        System.out.println("chuoiky " +bytesToHex(data)  );
        thebus.sendAPDUtoApplet(cmdcreateSig,data);

//              nhận chuỗi ký số sau khi đã ký
        byte[] chuoiky = thebus.resAPDU.getData();
        if(chuoiky.length == 1 || thebus.resAPDU.getSW1() != 0x90){
            JOptionPane.showMessageDialog(this, "Ký số không thành công");
            return false;
        }else {
            byte[] cmdsendpublickey = {(byte) 0xA0, (byte) 0x26, (byte) 0x00, (byte) 0x00};
            byte[] pkey = getrsapubkey();
            int lent = pkey.length-6;
            byte[] key = new byte[lent];
            System.arraycopy(pkey, 0, key, 0, lent);
            thebus.sendAPDUtoApplet(cmdsendpublickey, key);
            if(thebus.resAPDU.getSW1() != 0x90){
                JOptionPane.showMessageDialog(this, "Gửi Publickey không thành công");
                return false;
            }else {
                byte[] cmdVerify = {(byte) 0xA0, (byte) 0x25, (byte) 0x00, (byte) 0x00};
                int len = data.length + chuoiky.length ;
                byte[] d = new byte[len];
                System.arraycopy(data, 0, d, 0, data.length);
                System.arraycopy(chuoiky, 0, d, data.length, chuoiky.length);
                thebus.sendAPDUtoApplet(cmdVerify, d);
                if(thebus.resAPDU.getBytes()[0] != 0x01){
                    JOptionPane.showMessageDialog(this, "Xác thực không thành công");
                    return false;
                }
                return true;
            }
        }

    }
    
    public byte[] getrsapubkey(){
        byte[] cmd = {(byte) 0xA0, (byte) 0x11, (byte) 0x00, (byte) 0x00};
        byte[] data= {0};        
        thebus.sendAPDUtoApplet(cmd);
        byte[] dataRes = thebus.resAPDU.getData();
        int le = thebus.resAPDU.getNr();
        String tach = new String(dataRes) ;

        System.out.print("a:"+tach);
        String[] a = tach.split(":");
        String mnv = a[0];
        String ht = a[1];
        String ns = a[2];
        String cv = a[3];
        String dt = a[4];
        System.out.println("manv    " + mnv);
        if(mnv==null)
        {
            
            return null;
        }
        //Connection conn = DriverManager.getConnection(ConnectDB.getURL(), ConnectDB.getUSER(), ConnectDB.getPWD());
        
        Nhanvien nv =  connectDatabase.getInfoByManv(mnv);
            
        return nv.getMacongkhai();
    } 

       static String randomString(int n)
    {
        // chose a Character random from this String
        String AlphaNumericString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                    + "0123456789"
                                    + "abcdefghijklmnopqrstuvxyz";
        // create StringBuffer size of AlphaNumericString
        StringBuilder sb = new StringBuilder(n);
  
        for (int i = 0; i < n; i++) {
            // generate a random number between
            // 0 to AlphaNumericString variable length
            int index = (int)(AlphaNumericString.length() * Math.random());
            // add Character one by one in end of sb
            sb.append(AlphaNumericString.charAt(index));
        }
        return sb.toString();
    }
    
// Hàm chuyển đổi byte thành chuỗi hex
public static String bytesToHex(byte[] bytes) {
    StringBuilder result = new StringBuilder();
    for (byte b : bytes) {
        result.append(String.format("%02X", b));
    }
    return result.toString();
}
public static boolean Verify_Digital_Signature(byte[] input, byte[] signatureToVerify, byte[] publicKeyBytes) throws Exception {
    // Convert publicKeyBytes to PublicKey object
    KeyFactory keyFactory = KeyFactory.getInstance("RSA");
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
    PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
    
    // Perform signature verification
    Signature signature = Signature.getInstance(SIGNING_ALGORITHM);
    signature.initVerify(publicKey);
    signature.update(input);
    return signature.verify(signatureToVerify);
}

    
    public int check_pindefault(String pin) {
        short lc = (short) pin.length(); //do dai du lieu gui vao applet
        short le = 1;//du lieu nhan mong doi (Le)
        byte[] cmd = {(byte) 0xA0, (byte) 0x22, (byte) 0x00, (byte) 0x00};
        byte[] data = pin.getBytes();
        //setCommandAPDU(cmd, (byte)lc, data,(byte)le);
        thebus.sendAPDUtoApplet(cmd, data);
        byte[] dataRes = thebus.resAPDU.getData();
        int lenRes= thebus.resAPDU.getNr() ;
       // setResponseAPDU(dataRes, (byte)lenRes);
        //String a = new String(dataRes);
        if (dataRes[0] == (byte)0x01) {//đúng mã PIN
            return 1;
        } else if(dataRes[0] == (byte)0x00){
            return 0;
        }else return 2;
    }
        
    public int check_pin(String pin) {
        short lc = (short) pin.length(); //do dai du lieu gui vao applet
        short le = 1;//du lieu nhan mong doi (Le)
        byte[] cmd = {(byte) 0xA0, (byte) 0x19, (byte) 0x00, (byte) 0x00};
        byte[] data = pin.getBytes();
       // setCommandAPDU(cmd, (byte)lc, data,(byte)le);
        thebus.sendAPDUtoApplet(cmd, data);
        byte[] dataRes = thebus.resAPDU.getData();
        int lenRes= thebus.resAPDU.getNr() ;
      //  setResponseAPDU(dataRes, (byte)lenRes);
        //String a = new String(dataRes);
        if (dataRes[0] == (byte)0x01) {//đúng mã PIN
            return 1;
        } else if(dataRes[0] == (byte)0x00){
            return 0;
        }else return 2;
    }
    
    
    private void chk_show_pwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_show_pwActionPerformed
        // TODO add your handling code here:
        if (chk_show_pw.isSelected()) {
            edt_pin.setEchoChar((char) 0);
        } else {
            edt_pin.setEchoChar('*');
        }
    }//GEN-LAST:event_chk_show_pwActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_connect;
    private javax.swing.JButton btnLogin;
    private javax.swing.JCheckBox chk_show_pw;
    private javax.swing.JPasswordField edt_pin;
    private javax.swing.JPanel form_login;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> txt_username;
    // End of variables declaration//GEN-END:variables

   
}
